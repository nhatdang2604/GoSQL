// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package select

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"gothrift/query/command/select/statement"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = statement.GoUnusedProtection__
// Attributes:
//  - Select
//  - From
type SelectCommand struct {
  Select *statement.SelectStatement `thrift:"select,1,required" db:"select" json:"select"`
  From *statement.FromStatement `thrift:"from,2,required" db:"from" json:"from"`
}

func NewSelectCommand() *SelectCommand {
  return &SelectCommand{}
}

var SelectCommand_Select_DEFAULT *statement.SelectStatement
func (p *SelectCommand) GetSelect() *statement.SelectStatement {
  if !p.IsSetSelect() {
    return SelectCommand_Select_DEFAULT
  }
return p.Select
}
var SelectCommand_From_DEFAULT *statement.FromStatement
func (p *SelectCommand) GetFrom() *statement.FromStatement {
  if !p.IsSetFrom() {
    return SelectCommand_From_DEFAULT
  }
return p.From
}
func (p *SelectCommand) IsSetSelect() bool {
  return p.Select != nil
}

func (p *SelectCommand) IsSetFrom() bool {
  return p.From != nil
}

func (p *SelectCommand) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSelect bool = false;
  var issetFrom bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSelect = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetFrom = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSelect{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Select is not set"));
  }
  if !issetFrom{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field From is not set"));
  }
  return nil
}

func (p *SelectCommand)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Select = &statement.SelectStatement{}
  if err := p.Select.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Select), err)
  }
  return nil
}

func (p *SelectCommand)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.From = &statement.FromStatement{}
  if err := p.From.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.From), err)
  }
  return nil
}

func (p *SelectCommand) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectCommand"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SelectCommand) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "select", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:select: ", p), err) }
  if err := p.Select.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Select), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:select: ", p), err) }
  return err
}

func (p *SelectCommand) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "from", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:from: ", p), err) }
  if err := p.From.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.From), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:from: ", p), err) }
  return err
}

func (p *SelectCommand) Equals(other *SelectCommand) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Select.Equals(other.Select) { return false }
  if !p.From.Equals(other.From) { return false }
  return true
}

func (p *SelectCommand) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SelectCommand(%+v)", *p)
}

func (p *SelectCommand) Validate() error {
  return nil
}
