// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package select

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"gothrift/component"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = component.GoUnusedProtection__
// Attributes:
//  - RequestID
//  - ResponseID
//  - Rows
type SelectResponse struct {
  RequestID thrift.Tuuid `thrift:"request_id,1,required" db:"request_id" json:"request_id"`
  ResponseID thrift.Tuuid `thrift:"response_id,2,required" db:"response_id" json:"response_id"`
  Rows []*component.Row `thrift:"rows,3,required" db:"rows" json:"rows"`
}

func NewSelectResponse() *SelectResponse {
  return &SelectResponse{}
}


func (p *SelectResponse) GetRequestID() thrift.Tuuid {
  return p.RequestID
}

func (p *SelectResponse) GetResponseID() thrift.Tuuid {
  return p.ResponseID
}

func (p *SelectResponse) GetRows() []*component.Row {
  return p.Rows
}
func (p *SelectResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestID bool = false;
  var issetResponseID bool = false;
  var issetRows bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.UUID {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.UUID {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResponseID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetRows = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestID is not set"));
  }
  if !issetResponseID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponseID is not set"));
  }
  if !issetRows{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rows is not set"));
  }
  return nil
}

func (p *SelectResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadUUID(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *SelectResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadUUID(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResponseID = v
}
  return nil
}

func (p *SelectResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*component.Row, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &component.Row{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Rows = append(p.Rows, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SelectResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SelectResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_id", thrift.UUID, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteUUID(ctx, thrift.Tuuid(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *SelectResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "response_id", thrift.UUID, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:response_id: ", p), err) }
  if err := oprot.WriteUUID(ctx, thrift.Tuuid(p.ResponseID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.response_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:response_id: ", p), err) }
  return err
}

func (p *SelectResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rows", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rows: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rows: ", p), err) }
  return err
}

func (p *SelectResponse) Equals(other *SelectResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestID != other.RequestID { return false }
  if p.ResponseID != other.ResponseID { return false }
  if len(p.Rows) != len(other.Rows) { return false }
  for i, _tgt := range p.Rows {
    _src1 := other.Rows[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *SelectResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SelectResponse(%+v)", *p)
}

func (p *SelectResponse) Validate() error {
  return nil
}
