// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package gosql

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type DatatypeTag int64
const (
  DatatypeTag_BOOLEAN DatatypeTag = 1
  DatatypeTag_INT DatatypeTag = 2
  DatatypeTag_DOUBLE DatatypeTag = 3
  DatatypeTag_STRING DatatypeTag = 4
)

func (p DatatypeTag) String() string {
  switch p {
  case DatatypeTag_BOOLEAN: return "BOOLEAN"
  case DatatypeTag_INT: return "INT"
  case DatatypeTag_DOUBLE: return "DOUBLE"
  case DatatypeTag_STRING: return "STRING"
  }
  return "<UNSET>"
}

func DatatypeTagFromString(s string) (DatatypeTag, error) {
  switch s {
  case "BOOLEAN": return DatatypeTag_BOOLEAN, nil 
  case "INT": return DatatypeTag_INT, nil 
  case "DOUBLE": return DatatypeTag_DOUBLE, nil 
  case "STRING": return DatatypeTag_STRING, nil 
  }
  return DatatypeTag(0), fmt.Errorf("not a valid DatatypeTag string")
}


func DatatypeTagPtr(v DatatypeTag) *DatatypeTag { return &v }

func (p DatatypeTag) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DatatypeTag) UnmarshalText(text []byte) error {
q, err := DatatypeTagFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DatatypeTag) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DatatypeTag(v)
return nil
}

func (p * DatatypeTag) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
