// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package gosql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - RequestID
//  - ResponseID
//  - InsertCount
type InsertResponse struct {
  RequestID thrift.Tuuid `thrift:"request_id,1,required" db:"request_id" json:"request_id"`
  ResponseID thrift.Tuuid `thrift:"response_id,2,required" db:"response_id" json:"response_id"`
  InsertCount int64 `thrift:"insert_count,3,required" db:"insert_count" json:"insert_count"`
}

func NewInsertResponse() *InsertResponse {
  return &InsertResponse{}
}


func (p *InsertResponse) GetRequestID() thrift.Tuuid {
  return p.RequestID
}

func (p *InsertResponse) GetResponseID() thrift.Tuuid {
  return p.ResponseID
}

func (p *InsertResponse) GetInsertCount() int64 {
  return p.InsertCount
}
func (p *InsertResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestID bool = false;
  var issetResponseID bool = false;
  var issetInsertCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.UUID {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.UUID {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResponseID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetInsertCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestID is not set"));
  }
  if !issetResponseID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponseID is not set"));
  }
  if !issetInsertCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InsertCount is not set"));
  }
  return nil
}

func (p *InsertResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadUUID(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestID = v
}
  return nil
}

func (p *InsertResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadUUID(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResponseID = v
}
  return nil
}

func (p *InsertResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InsertCount = v
}
  return nil
}

func (p *InsertResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InsertResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InsertResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_id", thrift.UUID, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_id: ", p), err) }
  if err := oprot.WriteUUID(ctx, thrift.Tuuid(p.RequestID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_id: ", p), err) }
  return err
}

func (p *InsertResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "response_id", thrift.UUID, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:response_id: ", p), err) }
  if err := oprot.WriteUUID(ctx, thrift.Tuuid(p.ResponseID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.response_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:response_id: ", p), err) }
  return err
}

func (p *InsertResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "insert_count", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:insert_count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.InsertCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.insert_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:insert_count: ", p), err) }
  return err
}

func (p *InsertResponse) Equals(other *InsertResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestID != other.RequestID { return false }
  if p.ResponseID != other.ResponseID { return false }
  if p.InsertCount != other.InsertCount { return false }
  return true
}

func (p *InsertResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InsertResponse(%+v)", *p)
}

func (p *InsertResponse) Validate() error {
  return nil
}
